// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  role      String   @default("USER") // USER, ADMIN
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  expenses         Expense[]
  budgets          Budget[]
  receipts         Receipt[]
  auditLogs        AuditLog[]
  categories       Category[]
  householdMembers HouseholdMember[]
  splits           Split[]
  createdHouseholds Household[] @relation("HouseholdCreator")

  @@map("users")
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String?
  color       String? // Hex color for UI
  icon        String? // Icon name for UI
  isActive    Boolean @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[]

  @@unique([name, userId])
  @@map("categories")
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  type        String   @default("EXPENSE") // EXPENSE, INCOME
  categoryId  String
  userId      String    // User who paid for the expense
  householdId String?   // Optional: household this expense belongs to
  receiptId   String?
  tags        String?   // JSON array of tags
  location    String?
  notes       String?
  isRecurring Boolean   @default(false)
  recurringPattern String? // JSON object for recurring pattern
  isShared    Boolean   @default(false) // Whether this expense is split among roommates
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  Category   @relation(fields: [categoryId], references: [id])
  receipt   Receipt?   @relation(fields: [receiptId], references: [id])
  household Household? @relation(fields: [householdId], references: [id])
  splits    Split[]    // How this expense is split among users

  @@map("expenses")
}

model Budget {
  id          String   @id @default(cuid())
  name        String
  amount      Float
  spent       Float    @default(0)
  period      String   // WEEKLY, MONTHLY, QUARTERLY, YEARLY
  startDate   DateTime
  endDate     DateTime
  categoryIds String? // JSON array of category IDs
  userId      String
  isActive    Boolean  @default(true)
  alertThreshold Float?   // Percentage threshold for alerts
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

model Receipt {
  id          String   @id @default(cuid())
  fileName    String
  originalName String
  filePath    String
  fileSize    Int
  mimeType    String
  uploadedAt  DateTime @default(now())
  userId      String
  extractedData String? // JSON object for OCR extracted data
  isProcessed Boolean  @default(false)

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[]

  @@map("receipts")
}

model AuditLog {
  id        String    @id @default(cuid())
  action    String    // CREATE, UPDATE, DELETE
  entity    String    // User, Expense, Budget, etc.
  entityId  String
  oldValues String?   // JSON object
  newValues String?   // JSON object
  userId    String
  ipAddress String?
  userAgent String?
  timestamp DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Household {
  id          String   @id @default(cuid())
  name        String
  description String?
  inviteCode  String   @unique // Unique code for joining household
  createdById String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy User              @relation("HouseholdCreator", fields: [createdById], references: [id])
  members   HouseholdMember[]
  expenses  Expense[]

  @@map("households")
}

model HouseholdMember {
  id          String   @id @default(cuid())
  userId      String
  householdId String
  role        String   @default("MEMBER") // ADMIN, MEMBER
  joinedAt    DateTime @default(now())
  isActive    Boolean  @default(true)

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  household Household @relation(fields: [householdId], references: [id], onDelete: Cascade)

  @@unique([userId, householdId])
  @@map("household_members")
}

model Split {
  id        String   @id @default(cuid())
  expenseId String
  userId    String
  amount    Float    // Amount this user owes for this expense
  isPaid    Boolean  @default(false) // Whether this user has settled their portion
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
  @@map("splits")
}
